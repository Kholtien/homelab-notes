# GitHub Actions workflow for deploying Hugo site to GitHub Pages
# This workflow automatically builds and deploys the site whenever changes are pushed to main

name: Deploy Hugo site to Pages

on:
  # Trigger on pushes to the main branch
  push:
    branches:
      - main

  # Allow manual workflow dispatch from Actions tab
  workflow_dispatch:

# Set permissions for the GitHub token
# These are required for deploying to GitHub Pages
permissions:
  contents: read      # Read repository contents
  pages: write        # Write to GitHub Pages
  id-token: write     # Write ID tokens for deployment

# Ensure only one deployment runs at a time
# If a new deployment starts, cancel any in-progress deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

# Use bash as the default shell for all steps
defaults:
  run:
    shell: bash

jobs:
  # Build job - compiles the Hugo site
  build:
    runs-on: ubuntu-latest
    env:
      # Hugo version to use - matches official Hugo docs recommendation
      HUGO_VERSION: 0.139.3
    steps:
      # Step 1: Install Hugo CLI (extended version for SCSS/Sass support)
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # Step 2: Install Dart Sass for SCSS compilation
      # Note: Remove this step if your theme doesn't use Sass
      - name: Install Dart Sass
        run: sudo snap install dart-sass

      # Step 3: Check out the repository code
      # fetch-depth: 0 gets full history for .GitInfo and .Lastmod
      # submodules: recursive ensures theme submodule is fetched
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Step 4: Configure GitHub Pages settings
      # This sets up the Pages URL and other deployment parameters
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # Step 5: Install Node.js dependencies if package-lock.json exists
      # This is optional and only runs if you have Node dependencies
      - name: Install Node.js dependencies
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true

      # Step 6: Build the Hugo site
      # --gc: Run garbage collection after build
      # --minify: Minify HTML, CSS, JS for smaller file sizes
      # --baseURL: Use the Pages URL from the setup step
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      # Step 7: Upload the built site as an artifact
      # The public/ directory contains the generated static site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deploy job - publishes the built site to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build  # This job waits for the build job to complete
    steps:
      # Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
